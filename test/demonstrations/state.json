{
    "domain": {
        "objects": [
            "bush",
            "person",
            "pole"
        ],
        "terrains": [
            "sidewalk"
        ]
    },
    "program_sketch": "def is_safe(pixel_loc):\n    if is_on(pixel_loc, 'sidewalk'):\n        if is_far_away_from(pixel_loc, 'person', ??) and is_far_away_from(pixel_loc, 'pole', ??) and is_far_away_from(pixel_loc, 'bush', ??):\n            return True\n    return False",
    "ldips_func_program_sketch": "def is_safe(pixel_loc):\n    if terrain(pixel_loc) == 0:\n        if distance_to_person(pixel_loc) > ?? and distance_to_pole(pixel_loc) > ?? and distance_to_bush(pixel_loc) > ??:\n            return True\n    return False",
    "predicate_library": {
        "docstrings": {
            "is_far_away_from(pixel_loc: Tuple[int, int], object_class: str, alpha: float) -> bool": "Returns True if the pixel location is far enough from, according to the parameter, the nearest object of the object_class",
            "is_on(pixel_loc: Tuple[int, int], terrain_class: str) -> bool": "Returns True if the pixel location is on the specified terrain class"
        },
        "codestrings": {
            "is_far_away_from(pixel_loc: Tuple[int, int], object_class: str, alpha: float) -> bool": "def is_far_away_from(pixel_loc: Tuple[int, int], object_class: str, alpha: float) -> bool:\n    \"\"\"Returns True if the pixel location is far enough from, according to the parameter, the nearest object of the object_class\"\"\"\n    loc = project_pixel_to_map(pixel_loc)\n    distance = distance_to_nearest_object(loc, object_class)\n    return distance > alpha",
            "is_on(pixel_loc: Tuple[int, int], terrain_class: str) -> bool": "def is_on(pixel_loc: Tuple[int, int], terrain_class: str) -> bool:\n    \"\"\"Returns True if the pixel location is on the specified terrain class\"\"\"\n    return terrain_at(pixel_loc) == terrain_class"
        }
    }
}